{"version":3,"sources":["logo.svg","features/counter/counterSlice.js","features/counter/Counter.js","App.js","app/store.js","index.js","features/counter/Counter.module.css"],"names":["module","exports","slice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","_slice$actions","actions","selectCount","counter","Counter","count","useSelector","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","incrementAmount","setIncrementAmount","React","createElement","className","styles","row","button","aria-label","onClick","textbox","onChange","e","target","Number","asyncButton","amount","setTimeout","App","src","logo","alt","configureStore","reducer","counterReducer1","ReactDOM","render","Provider","store","document","getElementById"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,kC,wMCE9BC,EAAQC,YAAY,CAC/BC,KAAM,UACNC,aAAc,CACZC,MAAO,GAETC,SAAU,CACRC,UAAW,SAACC,GAKVA,EAAMH,OAAS,GAEjBI,UAAW,SAACD,GACVA,EAAMH,OAAS,GAEjBK,kBAAmB,SAACF,EAAOG,GACzBH,EAAMH,OAASM,EAAOC,YAKrBC,EAAoDZ,EAAMa,QAAlDP,EAASM,EAATN,UAAWE,EAASI,EAATJ,UAAWC,EAAiBG,EAAjBH,kBAWxBK,EAAc,SAACP,GAAK,OAAKA,EAAMQ,QAAQX,OAErCJ,IAAa,Q,gBC1BrB,SAASgB,IACd,IAAMC,EAAQC,YAAYJ,GACpBK,EAAWC,cACjBC,EAA8CC,mBAAS,KAAIC,EAAAC,YAAAH,EAAA,GAApDI,EAAeF,EAAA,GAAEG,EAAkBH,EAAA,GAE1C,OACEI,IAAAC,cAAA,WACED,IAAAC,cAAA,OAAKC,UAAWC,IAAOC,KACrBJ,IAAAC,cAAA,UACEC,UAAWC,IAAOE,OAClBC,aAAW,kBACXC,QAAS,kBAAMf,EAASb,OACzB,KAGDqB,IAAAC,cAAA,QAAMC,UAAWC,IAAO1B,OAAQa,GAChCU,IAAAC,cAAA,UACEC,UAAWC,IAAOE,OAClBC,aAAW,kBACXC,QAAS,kBAAMf,EAASX,OACzB,MAIHmB,IAAAC,cAAA,OAAKC,UAAWC,IAAOC,KACrBJ,IAAAC,cAAA,SACEC,UAAWC,IAAOK,QAClBF,aAAW,uBACX7B,MAAOqB,EACPW,SAAU,SAAAC,GAAC,OAAIX,EAAmBW,EAAEC,OAAOlC,UAE7CuB,IAAAC,cAAA,UACEC,UAAWC,IAAOE,OAClBE,QAAS,kBACPf,EAASV,EAAkB8B,OAAOd,IAAoB,MAEzD,cAGDE,IAAAC,cAAA,UACEC,UAAWC,IAAOU,YAClBN,QAAS,kBAAMf,GD1BMsB,EC0BkBF,OAAOd,IAAoB,ED1BlC,SAACN,GACzCuB,YAAW,WACTvB,EAASV,EAAkBgC,MAC1B,QAHyB,IAACA,IC2BtB,e,MCrCME,MAXf,WACE,OACEhB,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAQC,UAAU,cAChBF,IAAAC,cAAA,OAAKgB,IAAKC,IAAMhB,UAAU,WAAWiB,IAAI,SACzCnB,IAAAC,cAACZ,EAAO,SCPD+B,cAAe,CAC5BC,QAAS,CACPjC,QAASkC,KCEbC,IAASC,OACPxB,IAAAC,cAACwB,IAAQ,CAACC,MAAOA,GACf1B,IAAAC,cAACe,EAAG,OAENW,SAASC,eAAe,U,kBCV1BzD,EAAOC,QAAU,CAAC,IAAM,qBAAqB,MAAQ,uBAAuB,OAAS,wBAAwB,QAAU,yBAAyB,YAAc,sD","file":"static/js/main.e871bd99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.be622899.svg\";","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const slice = createSlice({\n  name: \"counter\",\n  initialState: {\n    value: 0\n  },\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n});\n\nexport const { increment, decrement, incrementByAmount } = slice.actions;\n\nexport const incrementAsync = (amount) => (dispatch) => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount));\n  }, 1000);\n};\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\nexport default slice.reducer;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  decrement,\n  increment,\n  incrementByAmount,\n  incrementAsync,\n  selectCount,\n} from './counterSlice';\nimport styles from './Counter.module.css';\n\nexport function Counter() {\n  const count = useSelector(selectCount);\n  const dispatch = useDispatch();\n  const [incrementAmount, setIncrementAmount] = useState('2');\n\n  return (\n    <div>\n      <div className={styles.row}>\n        <button\n          className={styles.button}\n          aria-label=\"Increment value\"\n          onClick={() => dispatch(increment())}\n        >\n          +\n        </button>\n        <span className={styles.value}>{count}</span>\n        <button\n          className={styles.button}\n          aria-label=\"Decrement value\"\n          onClick={() => dispatch(decrement())}\n        >\n          -\n        </button>\n      </div>\n      <div className={styles.row}>\n        <input\n          className={styles.textbox}\n          aria-label=\"Set increment amount\"\n          value={incrementAmount}\n          onChange={e => setIncrementAmount(e.target.value)}\n        />\n        <button\n          className={styles.button}\n          onClick={() =>\n            dispatch(incrementByAmount(Number(incrementAmount) || 0))\n          }\n        >\n          Add Amount\n        </button>\n        <button\n          className={styles.asyncButton}\n          onClick={() => dispatch(incrementAsync(Number(incrementAmount) || 0))}\n        >\n          Add Async\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport { Counter } from \"./features/counter/Counter\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Counter />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer1 from \"../features/counter/counterSlice\";\n\nexport default configureStore({\n  reducer: {\n    counter: counterReducer1\n  }\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./app/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__1C_4f\",\"value\":\"Counter_value__1d0te\",\"button\":\"Counter_button__1xpSV\",\"textbox\":\"Counter_textbox__3ODaX\",\"asyncButton\":\"Counter_asyncButton__2UAr3 Counter_button__1xpSV\"};"],"sourceRoot":""}